#pragma once

#include <string>
#include <fstream>
#include <cctype>
#include <cinttypes>
#include <filesystem>
#include <cstring>
#include <regex>

#include "globals.hpp"

/**
 * INI Config file abstract base class
 */
class Config {
public:
    bool m_error{false};

    bool parse(const std::string& path);

protected:
    virtual bool set_key(const char* section, const char* key, const char* value) = 0;

    static int parse_bool(const char* str) {
        if (strcasecmp(str, "true") == 0 || strcasecmp(str, "y") == 0 || strcmp(str, "1") == 0)
            return 1;
        if (strcasecmp(str, "false") == 0 || strcasecmp(str, "n") == 0 || strcmp(str, "0") == 0)
            return 0;
        return -1;
    }
};

/**
 * Parse protocol server config file
 */
class AppConfig : public Config {
public:
    // TODO move to /etc
    static constexpr const char* CONFIG_FILE_PATH = "/opt/fediy/config.ini";

    explicit AppConfig(const std::string& path = CONFIG_FILE_PATH) {
        parse(path);
    }

    /// Where files are stored
    std::string m_data_dir{"/opt/fediy"};

    /// Domain where we're hosting the the service
    std::string m_hostname{"localhost"};

    /// Should clients+peers use SSL?
    bool m_ssl{true};

    /// Password salt that should not be changed
    // if we have a store with purchases we can give the user a key that only works with their salt
    // if they try to change their salt to that of another user they'll get locked out
    // install package generates admin account
    std::string m_salt;

    // TODO parse public and private keys

protected:
    bool set_key(const char* section, const char* key, const char* value) override;

    /**
     * Example config.ini
     *
     * hostname=example.com
     * data_dir=/opt/fediy/data
     * salt=this value is generated by install script
     * ssl=true
     */
};

